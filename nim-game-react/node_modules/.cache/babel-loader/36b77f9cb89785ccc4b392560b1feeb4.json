{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useNimGame = () => {\n  _s();\n  const [piles, setPiles] = useState([3, 5, 7]); // Initial piles of stones\n  const [currentPlayer, setCurrentPlayer] = useState('Player'); // Player or AI\n  const [gameOver, setGameOver] = useState(false);\n  const isGameOver = piles => piles.every(pile => pile === 0);\n  const aiMove = () => {\n    // AI logic to always win\n    const totalStones = piles.reduce((acc, pile) => acc + pile, 0);\n    let move = 0;\n    for (let pile of piles) {\n      if (pile > 0) {\n        const newTotal = totalStones - pile;\n        if (newTotal % 2 === 0) {\n          move = pile;\n          break;\n        }\n      }\n    }\n    if (move === 0) {\n      // If no winning move, take one stone from the first non-empty pile\n      move = piles.find(pile => pile > 0);\n    }\n    return move;\n  };\n  const playerMove = (pileIndex, stones) => {\n    if (piles[pileIndex] >= stones) {\n      const newPiles = [...piles];\n      newPiles[pileIndex] -= stones;\n      setPiles(newPiles);\n      setCurrentPlayer('AI');\n    }\n  };\n  useEffect(() => {\n    if (currentPlayer === 'AI' && !gameOver) {\n      const move = aiMove();\n      const pileIndex = piles.findIndex(pile => pile >= move);\n      const newPiles = [...piles];\n      newPiles[pileIndex] -= move;\n      setPiles(newPiles);\n      setCurrentPlayer('Player');\n    }\n    if (isGameOver(piles)) {\n      setGameOver(true);\n    }\n  }, [currentPlayer, piles]);\n  const resetGame = () => {\n    setPiles([3, 5, 7]);\n    setCurrentPlayer('Player');\n    setGameOver(false);\n  };\n  return {\n    piles,\n    currentPlayer,\n    gameOver,\n    playerMove,\n    resetGame\n  };\n};\n_s(useNimGame, \"CjqelI/0QoM+fD//E602shGYuNY=\");\nexport default useNimGame;","map":{"version":3,"names":["useState","useEffect","useNimGame","_s","piles","setPiles","currentPlayer","setCurrentPlayer","gameOver","setGameOver","isGameOver","every","pile","aiMove","totalStones","reduce","acc","move","newTotal","find","playerMove","pileIndex","stones","newPiles","findIndex","resetGame"],"sources":["/home/riki/Desktop/Nim/nim-game-react/src/hooks/useNimGame.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useNimGame = () => {\n    const [piles, setPiles] = useState([3, 5, 7]); // Initial piles of stones\n    const [currentPlayer, setCurrentPlayer] = useState('Player'); // Player or AI\n    const [gameOver, setGameOver] = useState(false);\n\n    const isGameOver = (piles) => piles.every(pile => pile === 0);\n\n    const aiMove = () => {\n        // AI logic to always win\n        const totalStones = piles.reduce((acc, pile) => acc + pile, 0);\n        let move = 0;\n\n        for (let pile of piles) {\n            if (pile > 0) {\n                const newTotal = totalStones - pile;\n                if ((newTotal % 2) === 0) {\n                    move = pile;\n                    break;\n                }\n            }\n        }\n\n        if (move === 0) {\n            // If no winning move, take one stone from the first non-empty pile\n            move = piles.find(pile => pile > 0);\n        }\n\n        return move;\n    };\n\n    const playerMove = (pileIndex, stones) => {\n        if (piles[pileIndex] >= stones) {\n            const newPiles = [...piles];\n            newPiles[pileIndex] -= stones;\n            setPiles(newPiles);\n            setCurrentPlayer('AI');\n        }\n    };\n\n    useEffect(() => {\n        if (currentPlayer === 'AI' && !gameOver) {\n            const move = aiMove();\n            const pileIndex = piles.findIndex(pile => pile >= move);\n            const newPiles = [...piles];\n            newPiles[pileIndex] -= move;\n            setPiles(newPiles);\n            setCurrentPlayer('Player');\n        }\n\n        if (isGameOver(piles)) {\n            setGameOver(true);\n        }\n    }, [currentPlayer, piles]);\n\n    const resetGame = () => {\n        setPiles([3, 5, 7]);\n        setCurrentPlayer('Player');\n        setGameOver(false);\n    };\n\n    return {\n        piles,\n        currentPlayer,\n        gameOver,\n        playerMove,\n        resetGame,\n    };\n};\n\nexport default useNimGame;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMU,UAAU,GAAIN,KAAK,IAAKA,KAAK,CAACO,KAAK,CAACC,IAAI,IAAIA,IAAI,KAAK,CAAC,CAAC;EAE7D,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACjB;IACA,MAAMC,WAAW,GAAGV,KAAK,CAACW,MAAM,CAAC,CAACC,GAAG,EAAEJ,IAAI,KAAKI,GAAG,GAAGJ,IAAI,EAAE,CAAC,CAAC;IAC9D,IAAIK,IAAI,GAAG,CAAC;IAEZ,KAAK,IAAIL,IAAI,IAAIR,KAAK,EAAE;MACpB,IAAIQ,IAAI,GAAG,CAAC,EAAE;QACV,MAAMM,QAAQ,GAAGJ,WAAW,GAAGF,IAAI;QACnC,IAAKM,QAAQ,GAAG,CAAC,KAAM,CAAC,EAAE;UACtBD,IAAI,GAAGL,IAAI;UACX;QACJ;MACJ;IACJ;IAEA,IAAIK,IAAI,KAAK,CAAC,EAAE;MACZ;MACAA,IAAI,GAAGb,KAAK,CAACe,IAAI,CAACP,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IACvC;IAEA,OAAOK,IAAI;EACf,CAAC;EAED,MAAMG,UAAU,GAAGA,CAACC,SAAS,EAAEC,MAAM,KAAK;IACtC,IAAIlB,KAAK,CAACiB,SAAS,CAAC,IAAIC,MAAM,EAAE;MAC5B,MAAMC,QAAQ,GAAG,CAAC,GAAGnB,KAAK,CAAC;MAC3BmB,QAAQ,CAACF,SAAS,CAAC,IAAIC,MAAM;MAC7BjB,QAAQ,CAACkB,QAAQ,CAAC;MAClBhB,gBAAgB,CAAC,IAAI,CAAC;IAC1B;EACJ,CAAC;EAEDN,SAAS,CAAC,MAAM;IACZ,IAAIK,aAAa,KAAK,IAAI,IAAI,CAACE,QAAQ,EAAE;MACrC,MAAMS,IAAI,GAAGJ,MAAM,CAAC,CAAC;MACrB,MAAMQ,SAAS,GAAGjB,KAAK,CAACoB,SAAS,CAACZ,IAAI,IAAIA,IAAI,IAAIK,IAAI,CAAC;MACvD,MAAMM,QAAQ,GAAG,CAAC,GAAGnB,KAAK,CAAC;MAC3BmB,QAAQ,CAACF,SAAS,CAAC,IAAIJ,IAAI;MAC3BZ,QAAQ,CAACkB,QAAQ,CAAC;MAClBhB,gBAAgB,CAAC,QAAQ,CAAC;IAC9B;IAEA,IAAIG,UAAU,CAACN,KAAK,CAAC,EAAE;MACnBK,WAAW,CAAC,IAAI,CAAC;IACrB;EACJ,CAAC,EAAE,CAACH,aAAa,EAAEF,KAAK,CAAC,CAAC;EAE1B,MAAMqB,SAAS,GAAGA,CAAA,KAAM;IACpBpB,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnBE,gBAAgB,CAAC,QAAQ,CAAC;IAC1BE,WAAW,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,OAAO;IACHL,KAAK;IACLE,aAAa;IACbE,QAAQ;IACRY,UAAU;IACVK;EACJ,CAAC;AACL,CAAC;AAACtB,EAAA,CAnEID,UAAU;AAqEhB,eAAeA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}