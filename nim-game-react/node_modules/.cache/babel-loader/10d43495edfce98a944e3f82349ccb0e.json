{"ast":null,"code":"import{useState,useEffect}from'react';const useNimGame=()=>{const[piles,setPiles]=useState([3,5,7]);// Initial piles of stones\nconst[currentPlayer,setCurrentPlayer]=useState('Player');// Player or AI\nconst[gameOver,setGameOver]=useState(false);const isGameOver=piles=>piles.every(pile=>pile===0);const aiMove=()=>{// AI logic to always win\nconst totalStones=piles.reduce((acc,pile)=>acc+pile,0);let move=0;for(let pile of piles){if(pile>0){const newTotal=totalStones-pile;if(newTotal%2===0){move=pile;break;}}}if(move===0){// If no winning move, take one stone from the first non-empty pile\nmove=piles.find(pile=>pile>0);}return move;};const playerMove=(pileIndex,stones)=>{if(piles[pileIndex]>=stones){const newPiles=[...piles];newPiles[pileIndex]-=stones;setPiles(newPiles);setCurrentPlayer('AI');}};useEffect(()=>{if(currentPlayer==='AI'&&!gameOver){const move=aiMove();const pileIndex=piles.findIndex(pile=>pile>=move);const newPiles=[...piles];newPiles[pileIndex]-=move;setPiles(newPiles);setCurrentPlayer('Player');}if(isGameOver(piles)){setGameOver(true);}},[currentPlayer,piles]);const resetGame=()=>{setPiles([3,5,7]);setCurrentPlayer('Player');setGameOver(false);};return{piles,currentPlayer,gameOver,playerMove,resetGame};};export default useNimGame;","map":{"version":3,"names":["useState","useEffect","useNimGame","piles","setPiles","currentPlayer","setCurrentPlayer","gameOver","setGameOver","isGameOver","every","pile","aiMove","totalStones","reduce","acc","move","newTotal","find","playerMove","pileIndex","stones","newPiles","findIndex","resetGame"],"sources":["/home/riki/Desktop/Nim/nim-game-react/src/hooks/useNimGame.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useNimGame = () => {\n    const [piles, setPiles] = useState([3, 5, 7]); // Initial piles of stones\n    const [currentPlayer, setCurrentPlayer] = useState('Player'); // Player or AI\n    const [gameOver, setGameOver] = useState(false);\n\n    const isGameOver = (piles) => piles.every(pile => pile === 0);\n\n    const aiMove = () => {\n        // AI logic to always win\n        const totalStones = piles.reduce((acc, pile) => acc + pile, 0);\n        let move = 0;\n\n        for (let pile of piles) {\n            if (pile > 0) {\n                const newTotal = totalStones - pile;\n                if ((newTotal % 2) === 0) {\n                    move = pile;\n                    break;\n                }\n            }\n        }\n\n        if (move === 0) {\n            // If no winning move, take one stone from the first non-empty pile\n            move = piles.find(pile => pile > 0);\n        }\n\n        return move;\n    };\n\n    const playerMove = (pileIndex, stones) => {\n        if (piles[pileIndex] >= stones) {\n            const newPiles = [...piles];\n            newPiles[pileIndex] -= stones;\n            setPiles(newPiles);\n            setCurrentPlayer('AI');\n        }\n    };\n\n    useEffect(() => {\n        if (currentPlayer === 'AI' && !gameOver) {\n            const move = aiMove();\n            const pileIndex = piles.findIndex(pile => pile >= move);\n            const newPiles = [...piles];\n            newPiles[pileIndex] -= move;\n            setPiles(newPiles);\n            setCurrentPlayer('Player');\n        }\n\n        if (isGameOver(piles)) {\n            setGameOver(true);\n        }\n    }, [currentPlayer, piles]);\n\n    const resetGame = () => {\n        setPiles([3, 5, 7]);\n        setCurrentPlayer('Player');\n        setGameOver(false);\n    };\n\n    return {\n        piles,\n        currentPlayer,\n        gameOver,\n        playerMove,\n        resetGame,\n    };\n};\n\nexport default useNimGame;"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACrB,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGJ,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CAAE;AAC/C,KAAM,CAACK,aAAa,CAAEC,gBAAgB,CAAC,CAAGN,QAAQ,CAAC,QAAQ,CAAC,CAAE;AAC9D,KAAM,CAACO,QAAQ,CAAEC,WAAW,CAAC,CAAGR,QAAQ,CAAC,KAAK,CAAC,CAE/C,KAAM,CAAAS,UAAU,CAAIN,KAAK,EAAKA,KAAK,CAACO,KAAK,CAACC,IAAI,EAAIA,IAAI,GAAK,CAAC,CAAC,CAE7D,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CACjB;AACA,KAAM,CAAAC,WAAW,CAAGV,KAAK,CAACW,MAAM,CAAC,CAACC,GAAG,CAAEJ,IAAI,GAAKI,GAAG,CAAGJ,IAAI,CAAE,CAAC,CAAC,CAC9D,GAAI,CAAAK,IAAI,CAAG,CAAC,CAEZ,IAAK,GAAI,CAAAL,IAAI,GAAI,CAAAR,KAAK,CAAE,CACpB,GAAIQ,IAAI,CAAG,CAAC,CAAE,CACV,KAAM,CAAAM,QAAQ,CAAGJ,WAAW,CAAGF,IAAI,CACnC,GAAKM,QAAQ,CAAG,CAAC,GAAM,CAAC,CAAE,CACtBD,IAAI,CAAGL,IAAI,CACX,MACJ,CACJ,CACJ,CAEA,GAAIK,IAAI,GAAK,CAAC,CAAE,CACZ;AACAA,IAAI,CAAGb,KAAK,CAACe,IAAI,CAACP,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CACvC,CAEA,MAAO,CAAAK,IAAI,CACf,CAAC,CAED,KAAM,CAAAG,UAAU,CAAGA,CAACC,SAAS,CAAEC,MAAM,GAAK,CACtC,GAAIlB,KAAK,CAACiB,SAAS,CAAC,EAAIC,MAAM,CAAE,CAC5B,KAAM,CAAAC,QAAQ,CAAG,CAAC,GAAGnB,KAAK,CAAC,CAC3BmB,QAAQ,CAACF,SAAS,CAAC,EAAIC,MAAM,CAC7BjB,QAAQ,CAACkB,QAAQ,CAAC,CAClBhB,gBAAgB,CAAC,IAAI,CAAC,CAC1B,CACJ,CAAC,CAEDL,SAAS,CAAC,IAAM,CACZ,GAAII,aAAa,GAAK,IAAI,EAAI,CAACE,QAAQ,CAAE,CACrC,KAAM,CAAAS,IAAI,CAAGJ,MAAM,CAAC,CAAC,CACrB,KAAM,CAAAQ,SAAS,CAAGjB,KAAK,CAACoB,SAAS,CAACZ,IAAI,EAAIA,IAAI,EAAIK,IAAI,CAAC,CACvD,KAAM,CAAAM,QAAQ,CAAG,CAAC,GAAGnB,KAAK,CAAC,CAC3BmB,QAAQ,CAACF,SAAS,CAAC,EAAIJ,IAAI,CAC3BZ,QAAQ,CAACkB,QAAQ,CAAC,CAClBhB,gBAAgB,CAAC,QAAQ,CAAC,CAC9B,CAEA,GAAIG,UAAU,CAACN,KAAK,CAAC,CAAE,CACnBK,WAAW,CAAC,IAAI,CAAC,CACrB,CACJ,CAAC,CAAE,CAACH,aAAa,CAAEF,KAAK,CAAC,CAAC,CAE1B,KAAM,CAAAqB,SAAS,CAAGA,CAAA,GAAM,CACpBpB,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CACnBE,gBAAgB,CAAC,QAAQ,CAAC,CAC1BE,WAAW,CAAC,KAAK,CAAC,CACtB,CAAC,CAED,MAAO,CACHL,KAAK,CACLE,aAAa,CACbE,QAAQ,CACRY,UAAU,CACVK,SACJ,CAAC,CACL,CAAC,CAED,cAAe,CAAAtB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}